name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    uses: "./.github/workflows/build-components.yaml"

  create-installer:
    name: Create Windows Installer
    runs-on: windows-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 1. Скачиваем собранный клиентский бинарник
      - name: Download Client Artifact
        uses: actions/download-artifact@v4
        with:
          name: anet-client-windows
          path: installer_source/

      # 2. Установка Inno Setup через Chocolatey
      - name: Install Inno Setup
        shell: powershell
        # Мы указываем флаг -y, чтобы принять все соглашения
        run: choco install -y innosetup

      # 3. Подготовка исходных файлов для компиляции
      - name: Prepare Source Files
        shell: powershell
        run: |
          # 3.1. Перемещение anet-client.exe в корень, как ожидает ISS
          Get-ChildItem installer_source\anet-client.exe | Move-Item -Destination installer_source\anet-client.exe
          
          # 3.2. Скачивание и размещение Wintun DLL
          $WINTUN_VERSION="0.14.1"
          Invoke-WebRequest -Uri "https://www.wintun.net/builds/wintun-$WINTUN_VERSION.zip" -OutFile "wintun.zip"
          Expand-Archive -Path "wintun.zip" -DestinationPath "wintun"
          Copy-Item -Path "wintun\wintun\bin\amd64\wintun.dll" -Destination "installer_source\wintun.dll"
          
          # 3.3. Копирование config и ISS скрипта в рабочую директорию
          Copy-Item -Path "contrib\config\client.toml" -Destination "installer_source\client.toml"
          
          # Для запуска ISCC скрипт должен быть в рабочем каталоге
          Copy-Item -Path "contrib\install.iss" -Destination "installer_source\install.iss"
          
          # Удаление временного каталога
          Remove-Item wintun, wintun.zip -Recurse

      # 4. Устанавливаем версию для передачи в компилятор
      - name: Set Release Version (for ISCC Define)
        shell: bash
        # Извлекаем версию из тега (убираем 'v' в начале)
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION_ARG=/DMyAppVersion=$VERSION" >> $GITHUB_ENV
          echo "Version set to: $VERSION"

      - name: Compile Inno Setup Installer (using ISCC.exe)
        shell: cmd
        # Переходим в директорию, где лежат все исходники
        # ISCC.exe добавится в PATH после установки Choco, но лучше указывать полный путь для стабильности
        run: |
          "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "%GITHUB_WORKSPACE%\installer_source\install.iss" /O"%GITHUB_WORKSPACE%\installer_source\Output" ${{ env.VERSION_ARG }}

      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          # Установщик компилируется в installer_source/Output/
          path: installer_source\Output\*.exe
          name: anet-client-setup-windows
          if-no-files-found: error


  package-and-release:
    runs-on: "ubuntu-latest"
    needs: ["build", "create-installer"]
    steps:
      - uses: "actions/checkout@v4"
        with:
          fetch-depth: "0"

      # Скачиваем ВСЕ артефакты, включая новый anet-client-setup-windows
      - name: "Download all binaries and installer artifacts"
        uses: "actions/download-artifact@v4"
        with:
          path: "artifacts"

      - name: "Set version from tag"
        run: "echo \"VERSION=${GITHUB_REF#refs/tags/v}\" >> $GITHUB_ENV"

      - name: "Prepare files for packaging"
        run: |
          mkdir -p release_files/server release_files/client-linux release_files/client-windows
          
          # Бинарники и конфиги для ZIP
          cp artifacts/anet-server/anet-server release_files/server/
          cp artifacts/anet-client-linux/anet-client release_files/client-linux/
          
          # Клиентские файлы для ZIP Windows архива
          CLIENT_WIN_DIR="release_files/client-windows"
          cp artifacts/anet-client-windows/anet-client.exe ${CLIENT_WIN_DIR}/

          cp contrib/config/server.toml release_files/server/
          cp contrib/config/client.toml release_files/client-linux/
          cp contrib/config/client.toml ${CLIENT_WIN_DIR}/

          # Wintun, для ZIP архива с клиентом (в дополнение к инсталлятору)
          cd ${CLIENT_WIN_DIR}
          WINTUN_VERSION="0.14.1"
          WINTUN_URL="https://www.wintun.net/builds/wintun-${WINTUN_VERSION}.zip"
          curl -sLO "$WINTUN_URL"
          unzip "wintun-${WINTUN_VERSION}.zip"
          cp "wintun/bin/amd64/wintun.dll" .
          rm -rf "wintun" "wintun-${WINTUN_VERSION}.zip"
          cd ../..

      - name: "Create zip archives"
        run: |
          cd release_files
          zip -r "server_${VERSION}.zip" server/
          zip -r "client-linux_${VERSION}.zip" client-linux/
          zip -r "client-windows_${VERSION}.zip" client-windows/
          
          # Перемещаем установщик, скачанный из artifacts, для включения в релиз
          INSTALLER_EXE=$(find ../artifacts/anet-client-setup-windows -name '*.exe')
          
          # Убеждаемся, что мы нашли ровно один EXE-файл.
          if [ -z "$INSTALLER_EXE" ]; then 
              echo "Error: Windows installer EXE not found in artifacts/anet-client-setup-windows"
              exit 1
          fi
          
          # Копируем EXE установщик, используя имя, определенное в ISS скрипте
          cp $INSTALLER_EXE ../ANET_VPN_Client_Setup_${VERSION}_x64.exe
          cd ..


      - name: "Create Release"
        uses: "softprops/action-gh-release@v1"
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref }}
          files: |
            release_files/server_${{ env.VERSION }}.zip
            release_files/client-linux_${{ env.VERSION }}.zip
            release_files/client-windows_${{ env.VERSION }}.zip
            ANET_VPN_Client_Setup_${{ env.VERSION }}_x64.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
