// This file is @generated by prost-build.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AuthRequest {
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AuthResponse {
    #[prost(string, tag = "1")]
    pub ip: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub netmask: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub gateway: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub mtu: i32,
    /// 32-байтовый ключ для ChaCha20Poly1305
    #[prost(bytes = "vec", tag = "5")]
    pub crypto_key: ::prost::alloc::vec::Vec<u8>,
    /// Порт для UDP соединения
    #[prost(uint32, tag = "6")]
    pub udp_port: u32,
    #[prost(string, tag = "7")]
    pub session_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UdpHandshake {
    /// 16-байтовый идентификатор клиента
    #[prost(string, tag = "1")]
    pub client_id: ::prost::alloc::string::String,
    /// Метка времени для защиты от replay-атак
    #[prost(uint64, tag = "2")]
    pub timestamp: u64,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Message {
    #[prost(oneof = "message::Content", tags = "1, 2, 3")]
    pub content: ::core::option::Option<message::Content>,
}
/// Nested message and enum types in `Message`.
pub mod message {
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum Content {
        #[prost(message, tag = "1")]
        AuthRequest(super::AuthRequest),
        #[prost(message, tag = "2")]
        AuthResponse(super::AuthResponse),
        #[prost(message, tag = "3")]
        UdpHandshake(super::UdpHandshake),
    }
}
